# name: test/sql/secrets/secrets_encryption.test
# description: Test secret creation for internal encryption
# group: [simple-encryption/secrets]

#statement ok
#PRAGMA enable_verification;

require simple_encryption

# Ensure any currently stored secrets don't interfere with the test
statement ok
set allow_persistent_secrets=false;

statement error
SELECT encrypt(11, 'key_1', 'random_message');
----
Invalid Input Error: No secret found with name 'key_1'

# Create an internal secret with wrong size
statement error
CREATE SECRET test_wrong_length (
	TYPE ENCRYPTION,
    MASTER_KEY '0123456789112345',
    LENGTH 99
);
----
Invalid Input Error: Invalid size for encryption key: '99', only a length of 16 bytes is supported

# Create an internal secret (for internal encryption of columns)
statement ok
CREATE SECRET key_1 (
	TYPE ENCRYPTION,
    MASTER_KEY '0123456789112345',
    LENGTH 16
);

query I
SELECT decrypt({'nonce_hi': 11752579000357969348, 'nonce_lo': 2472254480, 'value': 1288890}, 'key_1', 'random_message');
----
2082890652

# nonces are smaller here?
query I
SELECT decrypt({'nonce_hi': 9915119614377941136, 'nonce_lo': 5152853787508998146, 'value': -2098331716}, 'key_1', 'random_message');
----
11

statement ok
SELECT encrypt(11, 'key_1', 'random_message');

statement ok
CREATE TABLE test_1 AS SELECT 1 AS value FROM range(10);

statement ok
SELECT encrypt(value, 'key_1', 'random_message') AS encrypted_value FROM test_1;

statement ok
ALTER TABLE test_1 ADD COLUMN encrypted_values STRUCT(nonce_hi UBIGINT, nonce_lo UBIGINT, value INTEGER);

statement ok
ALTER TABLE test_1 ADD COLUMN decrypted_values INTEGER;

statement ok
UPDATE test_1 SET encrypted_values = encrypt(value, 'key_1', 'random_message');

statement ok
UPDATE test_1 SET decrypted_values = decrypt(encrypted_values, 'key_1', 'random_message');

query I
SELECT decrypted_values FROM test_1;
----
1
1
1
1
1
1
1
1
1
1
